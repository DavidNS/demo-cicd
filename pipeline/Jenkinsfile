node ("maven") {

   // FIXME this one will be extracted from pom.xml
   def APP_VERSION = "1.0.1"
   // FIXME this one should be obtained as an addition of NEXUS_URL plus all the information declared in pom.xml for the application (groupId, artifactId, version)
   def NEXUS_URL="http://nexus-devops.192.168.99.100.nip.io/nexus/content/repositories/releases/com/redhat/consulting/spring/demo-rest/0.0.1/demo-rest-0.0.1.jar"
   	
   // download and configure all common cicd stuff
   dir('cicd') {
      // download all cicd required files
      git "${params.CICD_GIT_URL}"
      // load openshift-utils functions (using this path as convention.. define a env var if desired...)
      openshiftUtils = load 'pipeline/functions/openshift-utils.groovy'

   }  
   // define maven with custom settings.xml (using this path as convention.. define a env var if desired...)
   def mvnCmd = "mvn -s ${WORKSPACE}/cicd/maven/settings.xml" 

   stage("Maven build") {

      dir('app') {
         // Get source code from repository
         git "${params.APP_GIT_URL}" 
         sh "${mvnCmd} clean package -DskipTests"
      }  
   }

   stage("Unit Testing & Analysis") {

      dir('app') {
         echo "TOOD => Perform some unit testing here!!!!"
         echo "TOOD => You may perform some static analysis as well.. integrate with sonarq"
      }        
   }

   stage("Push artifact to Nexus") {
       
      echo "TOOD => Release process, that it should create a branch/tag on git, modify pom versions and upload the artifact to Nexus"
      // this commented command will to the nexus part (if you just want that.. it works, but just once per version (or push it manually..)
      //sh "${mvnCmd} deploy -DskipTests"
        
   }


   stage("Build in Openshift") {
      
      // no need to define a cluster if we have just one defined and it is the one where Jenkins is running 
      openshift.withCluster() { 

         openshiftUtils.createProject(params.DEV_PROJECT, params.JENKINS_PROJECT)
         openshiftUtils.applyTemplate(params.DEV_PROJECT, "${WORKSPACE}/app/${params.APP_TEMPLATE}", params.APP_NAME,  APP_VERSION, params.APP_NAME, "${params.CUSTOM_TEMPLATE_PARAMETERS}" , [])
         openshiftUtils.startBuildFromFile(params.DEV_PROJECT, params.APP_NAME, NEXUS_URL, true) 
      }
   }

   stage("Deploy in *${params.DEV_PROJECT}*") {
      
      openshift.withCluster() { 

         openshiftUtils.deploy(params.DEV_PROJECT, params.APP_NAME)
      }
   }

   stage("Integration tests in *${params.DEV_PROJECT}*") {
       
      echo "TOOD => Define integration tests"
        
   }

   stage('Approval required') {
      // TODO send notification
      input "Ready to update ${params.TEST_PROJECT} project with application ${params.APP_NAME} version ${APP_VERSION}?"
   }

   stage("Deploy in *${params.TEST_PROJECT}*") {
      
      openshift.withCluster() { 

         openshiftUtils.createProject(params.TEST_PROJECT, params.JENKINS_PROJECT)
         // tag image
         openshift.tag("${params.IMAGESTREAM_PROJECT}/${params.APP_NAME}:${APP_VERSION}", "${params.IMAGESTREAM_PROJECT}/${params.APP_NAME}:${params.TEST_TAG}")
         openshiftUtils.applyTemplate(params.TEST_PROJECT, "${WORKSPACE}/app/${params.APP_TEMPLATE}", params.APP_NAME,  params.TEST_TAG, params.APP_NAME, "${params.CUSTOM_TEMPLATE_PARAMETERS}", ["BuildConfig", "ImageStream"] )
         openshiftUtils.deploy(params.TEST_PROJECT, params.APP_NAME)
      }
   }

   stage("Integration tests in *${params.TEST_PROJECT}*") {
       
      echo "TOOD => Define integration tests"
        
   }

   stage('Approval required') {
      // TODO send notification
      input "A/B deployment: Ready to update ${params.PROD_PROJECT} project with application ${params.APP_NAME} version ${APP_VERSION}?"
   }

   stage("Deploy A/B in *${params.PROD_PROJECT}*") {
      
      openshift.withCluster() { 

         openshiftUtils.createProject(params.PROD_PROJECT, params.JENKINS_PROJECT)
         // tag image
         openshift.tag("${params.IMAGESTREAM_PROJECT}/${params.APP_NAME}:${params.TEST_TAG}", "${params.IMAGESTREAM_PROJECT}/${params.APP_NAME}:${params.PROD_TAG}")
         openshift.withProject(params.PROD_PROJECT) {
            redeploy = openshift.selector("dc", params.APP_NAME).exists()
         }
         if (redeploy) {
            echo "Executing A/B deployment"
            // create alternate deployment with new version
            openshiftUtils.applyTemplate(params.PROD_PROJECT, "${WORKSPACE}/app/${params.APP_TEMPLATE}", "${params.APP_NAME}-alternate",  params.PROD_TAG, params.APP_NAME, "${params.CUSTOM_TEMPLATE_PARAMETERS}", ["BuildConfig", "ImageStream", "Route"] )
            openshiftUtils.deploy(params.PROD_PROJECT, "${params.APP_NAME}-alternate")
            // configure A/B routing
            sh "oc project ${params.PROD_PROJECT}"
            sh "oc patch route/${params.APP_NAME} -p '{\"spec\": { \"alternateBackends\": [ { \"kind\": \"Service\", \"name\": \"${params.APP_NAME}-alternate\", \"weight\": 20 } ] } }'"
         } else {
            echo "First time deployment"
            // first time deployment
            openshiftUtils.applyTemplate(params.PROD_PROJECT, "${WORKSPACE}/app/${params.APP_TEMPLATE}", params.APP_NAME,  params.PROD_TAG, params.APP_NAME, "${params.CUSTOM_TEMPLATE_PARAMETERS}", ["BuildConfig", "ImageStream"] )
            openshiftUtils.deploy(params.PROD_PROJECT, params.APP_NAME)
         }
      }
   }

   stage("Integration tests in *${params.PROD_PROJECT}*") {
       
      echo "TOOD => Define integration tests if needed.. "
        
   }

   stage('Approval required') {
      // TODO send notification
      input "Full deployment: Ready to update ${params.PROD_PROJECT} project with application ${params.APP_NAME} version ${APP_VERSION}? "
   }

   stage("Full deploy in *${params.PROD_PROJECT}*") {
      
      openshift.withCluster() { 

         echo "Executing full deployment"
         openshiftUtils.applyTemplate(params.PROD_PROJECT, "${WORKSPACE}/app/${params.APP_TEMPLATE}", "${params.APP_NAME}",  params.PROD_TAG, params.APP_NAME, "${params.CUSTOM_TEMPLATE_PARAMETERS}", ["BuildConfig", "ImageStream"] )
         openshiftUtils.deploy(params.PROD_PROJECT, "${params.APP_NAME}")
         // if needed
         sh "oc project ${params.PROD_PROJECT}"
         sh "oc patch route/${params.APP_NAME} -p '{\"spec\": { \"alternateBackends\": [ ] } }'"
         openshift.selector( "dc",  "${params.APP_NAME}-alternate" ).delete()
         openshift.selector( "svc",  "${params.APP_NAME}-alternate" ).delete()
      }
   }


}
